/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SoccerAssociationRole;

import Business.Club.Club;
import Business.League.League;
import Business.Match.Match;
import Business.Match.MatchDay;
import Business.Match.MatchDayDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lixuy
 */
public class FastCreateMatchJPanel extends javax.swing.JPanel {

    private JPanel container;
    private League league;
    private MatchDayDirectory tempMatchDayDirectory;
    /**
     * Creates new form FastCreateMatchJPanel
     */
    FastCreateMatchJPanel(JPanel container, League league) {
        initComponents();
        this.container = container;
        this.league = league;
        this.tempMatchDayDirectory = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startDatejTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        perferredTimejTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dayjComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        modejComboBox = new javax.swing.JComboBox<>();
        previewBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        addLeague = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Start Date :");

        startDatejTextField.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Preferred Time :");

        perferredTimejTextField.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Day Interval :");

        dayjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        dayjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Twice a Week", "Once a Week" }));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("League Mode :");

        modejComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        modejComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full Season", "Half Season" }));

        previewBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        previewBtn.setText("Preview");
        previewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewBtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Match Info :");

        backBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        addLeague.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addLeague.setText("Add to the League");
        addLeague.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLeagueActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MatchID", "Match Info", "Location", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(1).setResizable(false);
            jTable.getColumnModel().getColumn(2).setResizable(false);
            jTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startDatejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(dayjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(modejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(perferredTimejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5)
                            .addComponent(previewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addLeague)
                            .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 194, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(startDatejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(perferredTimejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dayjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(modejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(previewBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addLeague)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBtn)
                .addContainerGap(135, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void previewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewBtnActionPerformed
        // TODO add your handling code here:
        String startDate = startDatejTextField.getText();
        String preferredTime = perferredTimejTextField.getText();     
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        String dayInterval = (String) dayjComboBox.getSelectedItem();
        String mode = (String) modejComboBox.getSelectedItem();
        
        try 
        {
            Date unifiedTime = sdf.parse(startDate + " " + preferredTime);
            tempMatchDayDirectory = GenerateMatches(unifiedTime, dayInterval, mode);
            populateTable(tempMatchDayDirectory);
        } 
        catch (ParseException ex) {
            JOptionPane.showMessageDialog(null,"Wrong time format! Please enter as yyyy-MM-dd HH:mm!",null, JOptionPane.WARNING_MESSAGE);
        }
        

        
        
    }//GEN-LAST:event_previewBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageMatchJPanel panel = (ManageMatchJPanel) component;
        panel.initComboBox();
        
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed

    private void addLeagueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLeagueActionPerformed
        // TODO add your handling code here:
        league.setMatchDayDirectory(tempMatchDayDirectory);
        JOptionPane.showMessageDialog(null, "Matches were successfully added to league!");
    
    }//GEN-LAST:event_addLeagueActionPerformed

     private void populateTable(MatchDayDirectory tempMatchDayDirectory) {
        
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
      
        for(MatchDay matchDay : tempMatchDayDirectory.getMatchDayList())
        {  
            for( Match match: matchDay.getMatchList()) 
           {
             Object[] row = new Object[4];
             row[0] = match;
             row[1] = match.getClub1().getClubName() + " VS " + match.getClub2().getClubName();
             row[2] = match.getClub1().getAddress();
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
             row[3] = sdf.format(match.getTime());
                       
             dtm.addRow(row);      
           
           }
      }
    }
    private MatchDayDirectory GenerateMatches(Date unifiedTime, String dayInterval, String mode) {
        
          int clubNum = league.getClubDirectory().getClubList().size();
          LinkedList<Integer> list = new LinkedList<Integer>();
          ArrayList<Club> clubList = league.getClubDirectory().getClubList();
          Date dateContinue = null;
          
          MatchDayDirectory tempMatchDayDirectory = new MatchDayDirectory();
          if (clubNum%2 == 0)  
		{
                    for(int i=0; i<clubNum; i++)
			{
			  list.add(i+1);
			}
		}
		else
		{
		    for(int i=0; i<clubNum; i++)
			{
		          list.add(i+1);
			}
			list.add(0);
		}
          
                for (int i = 0; i<list.size()-1; i++)
		{
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(unifiedTime);
                    
                    if(dayInterval.equals("Once a Week"))
                       calendar.add(Calendar.DAY_OF_YEAR,7*i);
                    else
                    {
                      if(i%2==0) calendar.add(Calendar.DAY_OF_YEAR,(i/2) * 7);
                      else calendar.add(Calendar.DAY_OF_YEAR,((i + 1) / 2) * 7 - 3);
                    }
                    MatchDay tempMatchDay = tempMatchDayDirectory.addMatchDay();
                    Date dateofMatchDay = calendar.getTime();
                    dateContinue = calendar.getTime();
                    
	            for(int j = 0; j < list.size()/2; j++)
		    {
                     if(list.get(j)!=0&&list.get(list.size()-1-j)!=0)
                       {
                         tempMatchDay.addMatch(clubList.get(list.get(j)-1), clubList.get(list.get(list.size()-1-j)-1), dateofMatchDay);                   
                       }
	            }
			int temp = list.pollLast();
			list.add(1, temp);
 
		}
                
                if(mode.equals("Full Season"))
                {
                  int listSize = tempMatchDayDirectory.getMatchDayList().size();
                  for(int i = 0; i < listSize; i++)
                  {
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(dateContinue);
                    
                    if(dayInterval.equals("Once a Week"))
                       calendar.add(Calendar.DAY_OF_YEAR,7*i + 7);
                    else
                    {
                      if(i%2==0) calendar.add(Calendar.DAY_OF_YEAR,(i/2) *7 + 4);
                      else calendar.add(Calendar.DAY_OF_YEAR,((i + 1) / 2) * 7);
                    }
                    Date dateofMatchDay = calendar.getTime();
                    
                    MatchDay tempMatchDay = tempMatchDayDirectory.addMatchDay();
                    
                    for(Match match: tempMatchDayDirectory.getMatchDayList().get(i).getMatchList())
                    {
                      tempMatchDay.addMatch(match.getClub2(), match.getClub1(), dateofMatchDay);
                    }
                  
                  }
                
                
                
                }
                
                return tempMatchDayDirectory;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLeague;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox<String> dayjComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JComboBox<String> modejComboBox;
    private javax.swing.JTextField perferredTimejTextField;
    private javax.swing.JButton previewBtn;
    private javax.swing.JTextField startDatejTextField;
    // End of variables declaration//GEN-END:variables

}
