/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SoccerAssociationRole;

import Business.League.League;
import Business.Match.Match;
import Business.Match.MatchDay;
import Business.Organization.Organization;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lixuy
 */
public class ManageMatchJPanel extends javax.swing.JPanel {

    private JPanel container;
    private League league;
    private Organization organization;
    /**
     * Creates new form ManageMatchJPanel
     */
    public ManageMatchJPanel(JPanel container, Organization organization, League league) {
        initComponents();
        this.container = container;
        this.league = league;
        this.organization = organization;
        leaguejLabel.setText("League Name: " + league.getLeagueName());
        
         matchDayjComboBox.addItemListener(new ItemListener()
         {
            @Override
            public void itemStateChanged(ItemEvent e) 
            {
                if(e.getStateChange() == ItemEvent.SELECTED)
                {
                 String comboString = (String) matchDayjComboBox.getSelectedItem();
                 int selectedMatchDay = Integer.valueOf(comboString.split(" ")[1]);
                 populateTable(selectedMatchDay);
                }
            }
        });
              
        initComboBox();
        
    }

    public void initComboBox() {
        
        matchDayjComboBox.removeAllItems();
              
        for(int i = 1 ;i <= league.getMatchDayDirectory().getMatchDayList().size();i++)
        {
            matchDayjComboBox.addItem("MatchDay " + i);
        }     
        if(league.getMatchDayDirectory().getMatchDayList().size() != 0)
            matchDayjComboBox.setSelectedIndex(0);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        matchDayjComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        leaguejLabel = new javax.swing.JLabel();
        createaMatchBtn = new javax.swing.JButton();
        fastCreateBtn = new javax.swing.JButton();
        updateMatchBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        assignBtn = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Match Day :");

        matchDayjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MatchID", "Match Info", "Location", "Time", "Referee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(1).setResizable(false);
            jTable.getColumnModel().getColumn(2).setResizable(false);
            jTable.getColumnModel().getColumn(3).setResizable(false);
            jTable.getColumnModel().getColumn(4).setResizable(false);
        }

        leaguejLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        leaguejLabel.setText("League Name :");

        createaMatchBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        createaMatchBtn.setText("Create a Match");
        createaMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createaMatchBtnActionPerformed(evt);
            }
        });

        fastCreateBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        fastCreateBtn.setText("Fast Create Matches");
        fastCreateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastCreateBtnActionPerformed(evt);
            }
        });

        updateMatchBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        updateMatchBtn.setText("Update Match");
        updateMatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMatchBtnActionPerformed(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        assignBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        assignBtn.setText(" Assign Referee to Match");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fastCreateBtn)
                        .addGap(18, 18, 18)
                        .addComponent(createaMatchBtn)
                        .addGap(28, 28, 28)
                        .addComponent(updateMatchBtn)
                        .addGap(18, 18, 18)
                        .addComponent(assignBtn))
                    .addComponent(backBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(36, 36, 36)
                        .addComponent(matchDayjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(leaguejLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(leaguejLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(matchDayjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fastCreateBtn)
                    .addComponent(updateMatchBtn)
                    .addComponent(createaMatchBtn)
                    .addComponent(assignBtn))
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addContainerGap(136, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fastCreateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastCreateBtnActionPerformed
        // TODO add your handling code here:
        if(league.getMatchDayDirectory().getMatchDayList().size()==0)
        {
          FastCreateMatchJPanel panel = new FastCreateMatchJPanel(container,league);
          container.add("FastCreateMatchJPanel",panel);
          CardLayout layout = (CardLayout) container.getLayout();
          layout.next(container);
        }
        
        else
        {
         JOptionPane.showMessageDialog(null,"Matches are already created!","Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_fastCreateBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageLeagueAndMatchJPanel panel = (ManageLeagueAndMatchJPanel) component;
        panel.populateTable();
        
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = jTable.getSelectedRow();
        if(selectedrow >= 0)
        {
            Match match = (Match) jTable.getValueAt(selectedrow,0);
            
            String comboString = (String) matchDayjComboBox.getSelectedItem();
            int selectedMatchDay = Integer.valueOf(comboString.split(" ")[1]);
            MatchDay matchDay = league.getMatchDayDirectory().getMatchDayList().get(selectedMatchDay - 1);
            
            AssignRefereeJPanel panel = new AssignRefereeJPanel(container,organization.getPersonnelDirectory(), match, matchDay);
            container.add("AssignRefereeJPanel",panel);
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a match from the table first!","Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_assignBtnActionPerformed

    private void createaMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createaMatchBtnActionPerformed
        // TODO add your handling code here:
        if(league.getMatchDayDirectory().getMatchDayList().size() == 0)
            JOptionPane.showMessageDialog(null,"Please use Fast Create Match First!","Warning", JOptionPane.WARNING_MESSAGE);
        else
        {
            String comboString = (String) matchDayjComboBox.getSelectedItem();
            int selectedMatchDay = Integer.valueOf(comboString.split(" ")[1]);
            MatchDay matchDay = league.getMatchDayDirectory().getMatchDayList().get(selectedMatchDay - 1);
            CreateMatchJPanel panel = new CreateMatchJPanel(container,matchDay,league.getClubDirectory());
            
            container.add("CreateMatchJPanel",panel);
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
        }
    }//GEN-LAST:event_createaMatchBtnActionPerformed

    private void updateMatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMatchBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = jTable.getSelectedRow();
        if(selectedrow >= 0)
        {
            Match match = (Match) jTable.getValueAt(selectedrow,0);
            if(match.isClub1PlayerBigListProvided() || match.isClub2PlayerBigListProvided())
            {
             JOptionPane.showMessageDialog(null,"This match has begun, inable to update!","Warning", JOptionPane.WARNING_MESSAGE);
            }    
            else
            {
             UpdateMatchJPanel panel = new UpdateMatchJPanel(container, match, league.getClubDirectory());          
             container.add("UpdateMatchJPanel",panel);
             CardLayout layout = (CardLayout) container.getLayout();
             layout.next(container);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a match from the table first!","Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_updateMatchBtnActionPerformed

    private void populateTable(int selectedMatchDay) {
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
      
        for( Match match: league.getMatchDayDirectory().getMatchDayList().get(selectedMatchDay - 1).getMatchList()) 
        {
             Object[] row = new Object[5];
             row[0] = match;
             row[1] = match.getClub1().getClubName() + " VS " + match.getClub2().getClubName();
             row[2] = match.getClub1().getAddress();
             
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
             row[3] = sdf.format(match.getTime());
             
             if(match.getReferee() == null)
                 row[4] = "N/A";
             else row[4] = match.getReferee().getName();
                       
             dtm.addRow(row);      
           
         }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton createaMatchBtn;
    private javax.swing.JButton fastCreateBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel leaguejLabel;
    private javax.swing.JComboBox<String> matchDayjComboBox;
    private javax.swing.JButton updateMatchBtn;
    // End of variables declaration//GEN-END:variables

}
