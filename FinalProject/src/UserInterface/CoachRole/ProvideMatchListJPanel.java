/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CoachRole;

import Business.Match.Match;
import Business.Personnel.Personnel;
import Business.Personnel.PersonnelDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lixuy
 */
public class ProvideMatchListJPanel extends javax.swing.JPanel {

    private JPanel container;
    private Match match;
    private String clubBelong;
    private PersonnelDirectory tempPlayerList;

    /**
     * Creates new form ProvideMatchListJPanel
     */

    public ProvideMatchListJPanel(JPanel container, Match match, String clubBelong) {
        initComponents();
        this.container = container;
        this.match = match;
        this.clubBelong = clubBelong;

        tempPlayerList = new PersonnelDirectory();

        matchInfojLabel.setText("Match Information: " + match.getClub1().getClubName() + " VS " + match.getClub2().getClubName());
        populateMatchListTable();
        populateSquadListTable();
    }

    private void populateMatchListTable() {
        DefaultTableModel dtm = (DefaultTableModel) matchListjTable.getModel();
        dtm.setRowCount(0);

        for (Personnel personnel : tempPlayerList.getPersonnelList()) {
            Object[] row = new Object[2];
            row[0] = personnel.getId();
            row[1] = personnel;
            dtm.addRow(row);
        }
        playerNumberjLabel.setText("Number of Player in the Match List: " + Integer.toString(tempPlayerList.getPersonnelList().size()));
        initCaptainjComboBox();
        initGoalkeeperjComboBox();

    }

    private void populateSquadListTable() {

        DefaultTableModel dtm = (DefaultTableModel) squadListjTable.getModel();
        dtm.setRowCount(0);

        if (clubBelong.equals("club1")) {
            for (Personnel personnel1 : match.getMatchReport().getClub1BigPlayerDirectory().getPersonnelList()) {
                int flag = 0;
                for (Personnel personnel2 : tempPlayerList.getPersonnelList()) {
                    if (personnel1 == personnel2) {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0) {
                    Object[] row = new Object[2];
                    row[0] = personnel1.getId();
                    row[1] = personnel1;
                    dtm.addRow(row);

                }
            }
        } else {

            for (Personnel personnel1 : match.getMatchReport().getClub2BigPlayerDirectory().getPersonnelList()) {
                int flag = 0;
                for (Personnel personnel2 : tempPlayerList.getPersonnelList()) {
                    if (personnel1 == personnel2) {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0) {
                    Object[] row = new Object[2];
                    row[0] = personnel1.getId();
                    row[1] = personnel1;
                    dtm.addRow(row);

                }
            }
        }
    }

    private void initCaptainjComboBox() {
        captainjComboBox.removeAllItems();

        for (Personnel personnel : tempPlayerList.getPersonnelList()) {
            captainjComboBox.addItem("ID: " + personnel.getId() + " " + personnel.getName());
        }
    }

    private void initGoalkeeperjComboBox() {
        goalkeeperjComboBox.removeAllItems();
        for (Personnel personnel : tempPlayerList.getPersonnelList()) {
            goalkeeperjComboBox.addItem("ID: " + personnel.getId() + " " + personnel.getName());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matchInfojLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        playerNumberjLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        matchListjTable = new javax.swing.JTable();
        removeBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        squadListjTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        formationjComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        captainjComboBox = new javax.swing.JComboBox<>();
        goalkeeperjComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        confirmBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        matchInfojLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        matchInfojLabel.setText("Match Information:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Match List of the Match :");

        playerNumberjLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        playerNumberjLabel.setText("Number of Player in the Match List :");

        matchListjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(matchListjTable);

        removeBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Player List of the Squad List :");

        squadListjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(squadListjTable);

        addBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        formationjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        formationjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3-4-3", "3-5-2", "3-6-1", "4-3-3", "4-4-2", "4-5-1", "4-2-3-1", "5-3-2", "5-4-1" }));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Formation :");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Captain :");

        captainjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        goalkeeperjComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Goalkeeper :");

        confirmBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(playerNumberjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(matchInfojLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(15, 15, 15)
                        .addComponent(formationjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15)
                        .addComponent(captainjComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(goalkeeperjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matchInfojLabel)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(playerNumberjLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(removeBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(goalkeeperjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(captainjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(formationjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn)
                    .addComponent(backBtn))
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = matchListjTable.getSelectedRow();
        if (selectedrow >= 0) {
            Personnel personnel = (Personnel) matchListjTable.getValueAt(selectedrow, 1);
            tempPlayerList.getPersonnelList().remove(personnel);
            populateMatchListTable();
            populateSquadListTable();

        } else {
            JOptionPane.showMessageDialog(null, "Please select a player from the table first!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_removeBtnActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        if (clubBelong.equals("club1")) {
            if (tempPlayerList.getPersonnelList().size() != 11) //may change to 11 later
            {
                JOptionPane.showMessageDialog(null, "Number of Player must be 11!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to add these players into match list? (You cannot add new players when you exit.)", "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    match.getMatchReport().setClub1PlayerMatchDirectory(tempPlayerList);
                    match.setClub1PlayerMatchListProvided(true);

                    int captainId = Integer.valueOf(((String) captainjComboBox.getSelectedItem()).split(" ")[1]);
                    int goalkeeperId = Integer.valueOf(((String) goalkeeperjComboBox.getSelectedItem()).split(" ")[1]);

                    String formation = (String) formationjComboBox.getSelectedItem();
                    match.getMatchReport().setClub1Formation(formation);

                    for (Personnel personnel : match.getMatchReport().getClub1PlayerMatchDirectory().getPersonnelList()) {
                        if (personnel.getId() == captainId) {
                            match.getMatchReport().setClub1Captain(personnel);
                            break;
                        }
                    }

                    for (Personnel personnel : match.getMatchReport().getClub1PlayerMatchDirectory().getPersonnelList()) {
                        if (personnel.getId() == goalkeeperId) {
                            match.getMatchReport().setClub1Goalkeeper(personnel);
                            break;
                        }
                    }
                }
            }

        } else {
            if (tempPlayerList.getPersonnelList().size() != 11) //may change to 11 later
            {
                JOptionPane.showMessageDialog(null, "Number of Player must be 11!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to add these players into match list? (You cannot add new players when you exit.)", "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    match.getMatchReport().setClub2PlayerMatchDirectory(tempPlayerList);
                    match.setClub2PlayerMatchListProvided(true);

                    int captainId = Integer.valueOf(((String) captainjComboBox.getSelectedItem()).split(" ")[1]);
                    int goalkeeperId = Integer.valueOf(((String) goalkeeperjComboBox.getSelectedItem()).split(" ")[1]);

                    String formation = (String) formationjComboBox.getSelectedItem();
                    match.getMatchReport().setClub2Formation(formation);

                    for (Personnel personnel : match.getMatchReport().getClub2PlayerMatchDirectory().getPersonnelList()) {
                        if (personnel.getId() == captainId) {
                            match.getMatchReport().setClub2Captain(personnel);
                            break;
                        }
                    }

                    for (Personnel personnel : match.getMatchReport().getClub2PlayerMatchDirectory().getPersonnelList()) {
                        if (personnel.getId() == goalkeeperId) {
                            match.getMatchReport().setClub2GoalKeeper(personnel);
                            break;
                        }
                    }

                }
            }
        }
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = squadListjTable.getSelectedRow();
        if (selectedrow >= 0) {
            Personnel personnel = (Personnel) squadListjTable.getValueAt(selectedrow, 1);
            tempPlayerList.getPersonnelList().add(personnel);

            populateMatchListTable();
            populateSquadListTable();

        } else {
            JOptionPane.showMessageDialog(null, "Please select a player from the table first!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManagePlayerListJPanel panel = (ManagePlayerListJPanel) component;
        panel.populateTable();
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox<String> captainjComboBox;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JComboBox<String> formationjComboBox;
    private javax.swing.JComboBox<String> goalkeeperjComboBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel matchInfojLabel;
    private javax.swing.JTable matchListjTable;
    private javax.swing.JLabel playerNumberjLabel;
    private javax.swing.JButton removeBtn;
    private javax.swing.JTable squadListjTable;
    // End of variables declaration//GEN-END:variables

}
